************************************************************/
*                                                          *
*                                   *
*                 ******** GIT TIPS & TRICKS ********       *

************************************************************/


[Working Directory] --(git add)--> [Staging Area] --(git commit)--> [Local Repository]


first step in a project when you start afresh

git init to initialise the directory in git

use below commands to configure username and email
git config user.name Rajesh
git config user.email rajesh.daswani@gmail.com

below command to check
git config -l --local

use git log and git status to check what is the status

use .gitignore file to ignore the files or dir from versioning

use git add . to push files to staging area
check if they moved using git status

Now to push them to the local repository
use git commit which opens up the default text editor, update commit message in first line and close the file, to dit it one go use git commit -m

check git status after commit and use git log to check the initial commit

Pushing

To send the commit from local to remote repo
create a repo in the remote github UI, copy the url and use below command
git remote add origin https://github.com/rdaswani/javamasterclass.git

then git push

You would get a warning its not a upstream branch , the below should resolve and push
git push --set-upstream origin master

go back to remote in UI and check the files

Now if you change a file shortcut to move to staging and commit is below
 git commit -am"Shortcut use Updated GitTipsfile"
 verify by git log

*****************************************************************

Cloning, merging, fetching and pulling

| Command     | Purpose                                                                      | Example                                      |
| ----------- | ---------------------------------------------------------------------------- | -------------------------------------------- |
| `git clone` | Copy an entire remote repository to your local machine.                      | `git clone https://github.com/user/repo.git` |
| `git fetch` | Download new data from the remote repo **but don’t merge** it yet.           | `git fetch origin`                           |
| `git pull`  | Download new data from the remote **and merge** it with your current branch. | `git pull origin main`                       |
| `git merge` | Merge changes from another branch into your current branch.                  | `git merge feature-branch`                   |


Key Differences:
✅ Cloning → One-time setup to get a copy of a remote repo.
✅ Fetching → Grab new data but don’t apply it yet.
✅ Pulling → Fetch + Merge (immediate update of your local branch).
✅ Merging → Combine changes from another branch or source.

just like init , its same concept for cloning an existing  repo from remote repo from gitlab/github/bitbucket
it clones in 2 places working directory and local repo

| Command        | Purpose                                       | Example                  |
| -------------- | --------------------------------------------- | ------------------------ |
| `git branch`   | List or create branches                       | `git branch new-feature` |
| `git checkout` | Switch to another branch (or create & switch) | `git checkout -b hotfix` |


 Rebasing (Simple Explanation)
 ============================
✅ Rebasing is like “moving your work to the end” of the main branch.

Example:
Imagine:

main ➜ A—B—C

feature ➜ A—B—C—D—E (you’re 2 commits ahead: D and E)

main moves on and gets new commits: A—B—C—F—G


 Fast-Forward Merge (Simplified)
 =================================
A fast-forward merge happens when:

✅ The branch you’re merging has no new commits compared to the branch you’re on.
✅ Git can just “slide” the branch pointer forward without needing to create a new merge commit.

Example in plain words:
1️⃣ Imagine main is at commit A.
2️⃣ feature branch is at commit C, and main doesn’t have anything new.
3️⃣ When you merge feature into main, Git just moves the pointer from A ➜ C.

That’s it—no messy merge commit! 🎉

✅ Why it’s called “fast-forward”
Because the branch’s history doesn’t change—Git just moves the pointer forward, like fast-forwarding a video. ⏩

This line added in feature/myFirstBranch